--- old/src/date.c	2014-09-18 14:25:26.000000000 -0400
+++ new/src/date.c	2014-09-18 15:25:09.000000000 -0400
@@ -4,7 +4,19 @@
  * Copyright (C) Linus Torvalds, 2005
  */
 
-#include "cache.h"
+#include <sys/time.h>
+#include <ctype.h>
+#include <string.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <limits.h>
+#include <stdarg.h>
+
+#include "date.h"
+
+#include <R.h>
+
+#define ARRAY_SIZE(x) (sizeof(x)/sizeof(x[0]))
 
 /*
  * This is like mktime, but without normalization of tm_wday and tm_yday.
@@ -50,17 +62,6 @@
 }
 
 /*
- * The "tz" thing is passed in as this strange "decimal parse of tz"
- * thing, which means that tz -0100 is passed in as the integer -100,
- * even though it means "sixty minutes off"
- */
-static struct tm *time_to_tm(unsigned long time, int tz)
-{
-	time_t t = gm_time_t(time, tz);
-	return gmtime(&t);
-}
-
-/*
  * What value of "tz" was in effect back then at "time" in the
  * local timezone?
  */
@@ -86,137 +87,6 @@
 	return offset * eastwest;
 }
 
-void show_date_relative(unsigned long time, int tz,
-			       const struct timeval *now,
-			       struct strbuf *timebuf)
-{
-	unsigned long diff;
-	if (now->tv_sec < time) {
-		strbuf_addstr(timebuf, _("in the future"));
-		return;
-	}
-	diff = now->tv_sec - time;
-	if (diff < 90) {
-		strbuf_addf(timebuf,
-			 Q_("%lu second ago", "%lu seconds ago", diff), diff);
-		return;
-	}
-	/* Turn it into minutes */
-	diff = (diff + 30) / 60;
-	if (diff < 90) {
-		strbuf_addf(timebuf,
-			 Q_("%lu minute ago", "%lu minutes ago", diff), diff);
-		return;
-	}
-	/* Turn it into hours */
-	diff = (diff + 30) / 60;
-	if (diff < 36) {
-		strbuf_addf(timebuf,
-			 Q_("%lu hour ago", "%lu hours ago", diff), diff);
-		return;
-	}
-	/* We deal with number of days from here on */
-	diff = (diff + 12) / 24;
-	if (diff < 14) {
-		strbuf_addf(timebuf,
-			 Q_("%lu day ago", "%lu days ago", diff), diff);
-		return;
-	}
-	/* Say weeks for the past 10 weeks or so */
-	if (diff < 70) {
-		strbuf_addf(timebuf,
-			 Q_("%lu week ago", "%lu weeks ago", (diff + 3) / 7),
-			 (diff + 3) / 7);
-		return;
-	}
-	/* Say months for the past 12 months or so */
-	if (diff < 365) {
-		strbuf_addf(timebuf,
-			 Q_("%lu month ago", "%lu months ago", (diff + 15) / 30),
-			 (diff + 15) / 30);
-		return;
-	}
-	/* Give years and months for 5 years or so */
-	if (diff < 1825) {
-		unsigned long totalmonths = (diff * 12 * 2 + 365) / (365 * 2);
-		unsigned long years = totalmonths / 12;
-		unsigned long months = totalmonths % 12;
-		if (months) {
-			struct strbuf sb = STRBUF_INIT;
-			strbuf_addf(&sb, Q_("%lu year", "%lu years", years), years);
-			strbuf_addf(timebuf,
-				 /* TRANSLATORS: "%s" is "<n> years" */
-				 Q_("%s, %lu month ago", "%s, %lu months ago", months),
-				 sb.buf, months);
-			strbuf_release(&sb);
-		} else
-			strbuf_addf(timebuf,
-				 Q_("%lu year ago", "%lu years ago", years), years);
-		return;
-	}
-	/* Otherwise, just years. Centuries is probably overkill. */
-	strbuf_addf(timebuf,
-		 Q_("%lu year ago", "%lu years ago", (diff + 183) / 365),
-		 (diff + 183) / 365);
-}
-
-const char *show_date(unsigned long time, int tz, enum date_mode mode)
-{
-	struct tm *tm;
-	static struct strbuf timebuf = STRBUF_INIT;
-
-	if (mode == DATE_RAW) {
-		strbuf_reset(&timebuf);
-		strbuf_addf(&timebuf, "%lu %+05d", time, tz);
-		return timebuf.buf;
-	}
-
-	if (mode == DATE_RELATIVE) {
-		struct timeval now;
-
-		strbuf_reset(&timebuf);
-		gettimeofday(&now, NULL);
-		show_date_relative(time, tz, &now, &timebuf);
-		return timebuf.buf;
-	}
-
-	if (mode == DATE_LOCAL)
-		tz = local_tzoffset(time);
-
-	tm = time_to_tm(time, tz);
-	if (!tm) {
-		tm = time_to_tm(0, 0);
-		tz = 0;
-	}
-
-	strbuf_reset(&timebuf);
-	if (mode == DATE_SHORT)
-		strbuf_addf(&timebuf, "%04d-%02d-%02d", tm->tm_year + 1900,
-				tm->tm_mon + 1, tm->tm_mday);
-	else if (mode == DATE_ISO8601)
-		strbuf_addf(&timebuf, "%04d-%02d-%02d %02d:%02d:%02d %+05d",
-				tm->tm_year + 1900,
-				tm->tm_mon + 1,
-				tm->tm_mday,
-				tm->tm_hour, tm->tm_min, tm->tm_sec,
-				tz);
-	else if (mode == DATE_RFC2822)
-		strbuf_addf(&timebuf, "%.3s, %d %.3s %d %02d:%02d:%02d %+05d",
-			weekday_names[tm->tm_wday], tm->tm_mday,
-			month_names[tm->tm_mon], tm->tm_year + 1900,
-			tm->tm_hour, tm->tm_min, tm->tm_sec, tz);
-	else
-		strbuf_addf(&timebuf, "%.3s %.3s %d %02d:%02d:%02d %d%c%+05d",
-				weekday_names[tm->tm_wday],
-				month_names[tm->tm_mon],
-				tm->tm_mday,
-				tm->tm_hour, tm->tm_min, tm->tm_sec,
-				tm->tm_year + 1900,
-				(mode == DATE_LOCAL) ? 0 : ' ',
-				tz);
-	return timebuf.buf;
-}
-
 /*
  * Check these. And note how it doesn't do the summer-time conversion.
  *
@@ -532,6 +402,49 @@
 	}
 
 	/*
+	 * If it has eight digits, then we pretend that it has dashes
+	 * in a XXXX-XX-XX format
+	 */
+	if (n == 8) {
+	        char xx[11];
+		int match;
+		xx[0] = date[0];
+		xx[1] = date[1];
+		xx[2] = date[2];
+		xx[3] = date[3];
+		xx[4] = '-';
+		xx[5] = date[4];
+		xx[6] = date[5];
+		xx[7] = '-';
+		xx[8] = date[6];
+		xx[9] = date[7];
+		xx[10] = '\0';
+		match = match_multi_number(num / 10000, xx[4], xx, xx + 4, tm);
+		if (match - 2 >= 0)
+		        return match - 2;
+	}
+
+	/* If it has six digits, then we pretend that it has dashes in
+	 * a XX-XX-XX format
+	 */
+	if (n == 6) {
+	        char xx[9];
+		int match;
+		xx[0] = date[0];
+		xx[1] = date[1];
+		xx[2] = '-';
+		xx[3] = date[2];
+		xx[4] = date[3];
+		xx[5] = '-';
+		xx[6] = date[4];
+		xx[7] = date[5];
+		xx[8] = '\0';
+		match = match_multi_number(num / 10000, xx[2], xx, xx + 2, tm);
+		if (match - 2 >= 0)
+		        return match - 2;
+	}
+
+	/*
 	 * Ignore lots of numerals. We took care of 4-digit years above.
 	 * Days or months must be one or two digits.
 	 */
@@ -666,7 +579,7 @@
 	tm.tm_min = -1;
 	tm.tm_sec = -1;
 	*offset = -1;
-	tm_gmt = 0;
+	tm_gmt = 1;
 
 	if (*date == '@' &&
 	    !match_object_header_date(date + 1, timestamp, offset))
@@ -763,7 +676,7 @@
 	else if (!strcmp(format, "raw"))
 		return DATE_RAW;
 	else
-		die("unknown date format %s", format);
+		error("unknown date format %s", format);
 }
 
 void datestamp(char *buf, int bufsize)
@@ -1000,7 +913,7 @@
 	return end;
 }
 
-static const char *approxidate_digit(const char *date, struct tm *tm, int *num)
+static const char *approxidate_digit(const char *date, struct tm *tm, int *num, int *touched)
 {
 	char *end;
 	unsigned long number = strtoul(date, &end, 10);
@@ -1012,14 +925,66 @@
 	case '-':
 		if (isdigit(end[1])) {
 			int match = match_multi_number(number, *end, date, end, tm);
-			if (match)
+			if (match) {
+			        *touched = 1;
 				return date + match;
+			}
+		}
+	}
+
+	/*
+	 * If it has eight digits, then we pretend that it has dashes
+	 * in a XXXX-XX-XX format
+	 */
+	if (end - date == 8) {
+	        char xx[11];
+		int match;
+		xx[0] = date[0];
+		xx[1] = date[1];
+		xx[2] = date[2];
+		xx[3] = date[3];
+		xx[4] = '-';
+		xx[5] = date[4];
+		xx[6] = date[5];
+		xx[7] = '-';
+		xx[8] = date[6];
+		xx[9] = date[7];
+		xx[10] = '\0';
+		match = match_multi_number(number / 10000, xx[4], xx, xx + 4, tm);
+		if (match - 2 >= 0) {
+		        *touched = 1;
+		        return date + match - 2;
 		}
 	}
 
+	/* If it has six digits, then we pretend that it has dashes in
+	 * a XX-XX-XX format
+	 */
+	if (end - date == 6) {
+	        char xx[9];
+		int match;
+		xx[0] = date[0];
+		xx[1] = date[1];
+		xx[2] = '-';
+		xx[3] = date[2];
+		xx[4] = date[3];
+		xx[5] = '-';
+		xx[6] = date[4];
+		xx[7] = date[5];
+		xx[8] = '\0';
+		match = match_multi_number(number / 10000, xx[2], xx, xx + 2, tm);
+		if (match - 2 >= 0) {
+		        *touched = 1;
+		        return date + match - 2;
+		}
+	}
+
+
 	/* Accept zero-padding only for small numbers ("Dec 02", never "Dec 0002") */
-	if (date[0] != '0' || end - date <= 2)
+	if (date[0] != '0' || end - date <= 2) {
+	        *touched = 1;
 		*num = number;
+	}
 	return end;
 }
 
@@ -1057,7 +1022,8 @@
 	int number = 0;
 	int touched = 0;
 	struct tm tm, now;
-	time_t time_sec;
+	time_t time_sec, n, dst = 0;
+	int fill_mode = 1; 	/* 1: current time, 0: zero */
 
 	time_sec = tv->tv_sec;
 	localtime_r(&time_sec, &tm);
@@ -1066,6 +1032,9 @@
 	tm.tm_year = -1;
 	tm.tm_mon = -1;
 	tm.tm_mday = -1;
+	tm.tm_hour = -1;
+	tm.tm_min = -1;
+	tm.tm_sec = -1;
 
 	for (;;) {
 		unsigned char c = *date;
@@ -1074,8 +1043,7 @@
 		date++;
 		if (isdigit(c)) {
 			pending_number(&tm, &number);
-			date = approxidate_digit(date-1, &tm, &number);
-			touched = 1;
+			date = approxidate_digit(date-1, &tm, &number, &touched);
 			continue;
 		}
 		if (isalpha(c))
@@ -1084,7 +1052,47 @@
 	pending_number(&tm, &number);
 	if (!touched)
 		*error_ret = 1;
-	return update_tm(&tm, &now, 0);
+
+	/* fill in missing members */
+	if (tm.tm_year < 0) {
+	        tm.tm_year = fill_mode ? now.tm_year : 0;
+	} else {
+	        fill_mode = 0;
+	}
+	if (tm.tm_mon < 0) {
+	        tm.tm_mon = fill_mode ? now.tm_mon : 0;
+	} else {
+	        fill_mode = 0;
+	}
+	if (tm.tm_mday < 0) {
+	        tm.tm_mday = fill_mode ? now.tm_mday : 1;
+	} else {
+	        fill_mode = 0;
+	}
+	if (tm.tm_hour < 0) {
+	        tm.tm_hour = fill_mode ? now.tm_hour : 0;
+	} else {
+	        fill_mode = 0;
+	}
+	if (tm.tm_min < 0) {
+	        tm.tm_min = fill_mode ? now.tm_min : 0;
+	} else {
+	        fill_mode = 0;
+	}
+	if (tm.tm_sec < 0) {
+	        tm.tm_sec = fill_mode ? now.tm_sec : 0;
+	} else {
+	        fill_mode = 0;
+	}
+
+	/* Fill in missing fields */
+	n = mktime(&tm);
+
+	/* Fix for non-dst */
+	if (!tm.tm_isdst)
+	        dst = 100;
+
+	return gm_time_t(n, local_tzoffset(n) + dst);
 }
 
 unsigned long approxidate_relative(const char *date, const struct timeval *tv)
